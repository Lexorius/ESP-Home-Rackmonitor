esphome:
  name: rack-sensor-v02

rp2040:
  board: rpipicow
#  framework:
#    platform_version: https://github.com/maxgerhardt/platform-raspberrypi.git

safe_mode:
    disabled: true

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "<enckey>"

ota:
  - platform: esphome
    password: "<esphome-password>"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot in case wifi connection fails
  ap:
    ssid: "Sensory-Pi Fallback Hotspot"
    password: "IRJ7gwNZCKKW"

font:
    - file: "https://github.com/IdreesInc/Monocraft/releases/download/v3.0/Monocraft.ttf"
      id: web_font
      size: 20
    - file:
        url: "https://github.com/IdreesInc/Monocraft/releases/download/v3.0/Monocraft.ttf"
        type: web
      id: web_font2
      size: 24
    - file: 'fonts/silkscreen.ttf'
      id: font1
      size: 8
    - file: 'fonts/Roboto-Regular.ttf'
      id: font2
      size: 48
    - file: 'fonts/LCD Normal.ttf'
      id: font3
      size: 14

i2c:
  sda: 20
  scl: 21
  scan: true
  id: mainbus

one_wire:
  - platform: gpio
    pin: 2

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-
      // Print "Rack #1" in top center.
      it.printf(64, 0, id(font1), TextAlign::TOP_CENTER, "Rack #1");

      // Print time in HH:MM format
      it.strftime(0, 60, id(font2), TextAlign::BASELINE_LEFT, "%H:%M", id(sntp_time).now());
      // Print inside temperature (from homeassistant sensor)
      if (id(bme680_temp).has_state()) {
        it.printf(127, 23, id(font3), TextAlign::TOP_RIGHT , "%.1fÂ°", id(bme680_temp).state);
      }


sensor:
  - platform: bme680
    temperature:
      id: bme680_temp
      name: "BME680 Temperature"
      oversampling: 16x
    pressure:
      name: "BME680 Pressure"
    humidity:
      id: "humidity"
      name: "BME680 Humidity"
    gas_resistance:
      id: "gas_resistance"
      name: "BME680 Gas Resistance"
    address: 0x77
    update_interval: 60s
  - platform: template
    name: "BME680 Indoor Air Quality"
    id: iaq
    icon: "mdi:gauge"
    # calculation: comp_gas = log(R_gas[ohm]) + 0.04 log(Ohm)/%rh * hum[%rh]
    lambda: |-
      return log(id(gas_resistance).state) + 0.04 *  id(humidity).state;
    state_class: "measurement"
    
  - platform: adc
    pin: GPIO26
    name: "watersensor"
    update_interval: 60s

binary_sensor:
  - platform: gpio
    pin:
      number: 5
      mode:
        input: true
        pullup: true
    name: "GPIO5"
  - platform: gpio
    pin:
      number: 6
      mode:
        input: true
        pullup: true
    name: "GPIO6" 



text_sensor:
  - platform: template
    name: "BME680 IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if (int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) <= 500) {
        return {"Extremely polluted"};
      }
      else {
        return {"unknown"};
      }


time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Berlin
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org
