esphome:
  name: rack-sensor-v1

rp2040:
  board: rpipicow
#  framework:
#    platform_version: https://github.com/maxgerhardt/platform-raspberrypi.git

safe_mode:
    disabled: true

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret rack_encrypt

ota:
  - platform: esphome
    password: !secret rack_ota

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot in case wifi connection fails
  ap:
    ssid: "Sensory-Pi Fallback Hotspot"
    password: !secret rack_backupap

font:
    - file: "https://github.com/IdreesInc/Monocraft/releases/download/v3.0/Monocraft.ttf"
      id: web_font
      size: 20
    - file:
        url: "https://github.com/IdreesInc/Monocraft/releases/download/v3.0/Monocraft.ttf"
        type: web
      id: web_font2
      size: 24
    - file:
        url: "https://github.com/IdreesInc/Monocraft/releases/download/v3.0/Monocraft.ttf"
        type: web
      id: web_font_14
      size: 14
    - file:
        url: "https://github.com/IdreesInc/Monocraft/releases/download/v3.0/Monocraft.ttf"
        type: web
      id: web_font_6
      size: 6
    - file: "fonts/MaterialDesign-Webfont-master/fonts/materialdesignicons-webfont.ttf"
      id: wifi_font
      size: 25
      glyphs: [
        # Wifi / thank you https://github.com/fredrike/esphome-node
        '󰤟', # mdi-wifi-strength-1
        '󰤢', # mdi-wifi-strength-2
        '󰤥', # mdi-wifi-strength-3
        '󰤨', # mdi-wifi-strength-4
        '󰤫', # mdi-wifi-strength-alert-outline
      ]

i2c:
  sda: 20
  scl: 21
  scan: true
  id: mainbus

one_wire:
  - platform: gpio
    pin: 2

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-
      int x, y, c;
      // Print "Rack #1" in top center.
      it.printf(64, 0, id(web_font_14), TextAlign::TOP_CENTER, "Rack #1");

      // Print time in HH:MM format
      it.strftime(0, 60, id(web_font_14), TextAlign::BASELINE_LEFT, "%H:%M", id(sntp_time).now());
      // Print inside temperature (from homeassistant sensor)
      if (id(bme680_temp).has_state()) {
        it.printf(127, 20, id(web_font2), TextAlign::TOP_RIGHT , "%.1f°C", id(bme680_temp).state);
        it.printf(127, 60, id(web_font_14), TextAlign::BASELINE_RIGHT , "%.1f%%", id(bme680_hum).state);
      }
      ###### Thanks for some inspiration based on https://github.com/fredrike/esphome-node 
      if (id(wifisignal).has_state()) {
        x = 0, y = 25;
        if (id(wifisignal).state >= -50) {
            //Excellent
            it.print(x, y, id(wifi_font), TextAlign::BASELINE_LEFT, "󰤨");
        } else if (id(wifisignal).state  >= -60) {
            //Good
            it.print(x, y, id(wifi_font), TextAlign::BASELINE_LEFT, "󰤥");
        } else if (id(wifisignal).state  >= -67) {
            //Fair
            it.print(x, y, id(wifi_font), TextAlign::BASELINE_LEFT, "󰤢");
        } else if (id(wifisignal).state  >= -70) {
            //Weak
            it.print(x, y, id(wifi_font), TextAlign::BASELINE_LEFT, "󰤟");
        } else {
            //Unlikely working signal
            it.print(x, y, id(wifi_font), TextAlign::BASELINE_LEFT, "󰤫");
        }
      }
    # ################################################
sensor:
  - platform: bme680
    temperature:
      id: bme680_temp
      name: "BME680 Temperature"
      oversampling: 16x
    pressure:
      id: bme680_pressure
      name: "BME680 Pressure"
    humidity:
      id: bme680_hum
      name: "BME680 Humidity"
    gas_resistance:
      id: bme680_gas
      name: "BME680 Gas Resistance"
    address: 0x77
    update_interval: 60s
  - platform: template
    name: "BME680 Indoor Air Quality"
    id: iaq
    icon: "mdi:gauge"
    # calculation: comp_gas = log(R_gas[ohm]) + 0.04 log(Ohm)/%rh * hum[%rh]
    lambda: |-
      return log(id(bme680_gas).state) + 0.04 *  id(bme680_pressure).state;
    state_class: "measurement"
    
  - platform: adc
    pin: GPIO26
    name: "watersensor"
    update_interval: 60s

  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: wifisignal
    update_interval: 60s

binary_sensor:
  - platform: gpio
    pin:
      number: 5
      mode:
        input: true
        pullup: true
    name: "GPIO5"
  - platform: gpio
    pin:
      number: 6
      mode:
        input: true
        pullup: true
    name: "GPIO6" 

  


text_sensor:
  - platform: template
    name: "BME680 IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if (int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) <= 500) {
        return {"Extremely polluted"};
      }
      else {
        return {"unknown"};
      }


time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Berlin
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org
